"""===========================================================================================================================================================================Title:        ZEN-GARDENCreated:      October-2021Authors:      Jacob Mannhardt (jmannhardt@ethz.ch)Organization: Laboratory of Reliability and Risk Engineering, ETH ZurichDescription:  Class is defining the postprocessing of the results.              The class takes as inputs the optimization problem (model) and the system configurations (system).              The class contains methods to read the results and save them in a result dictionary (rawResultDict).==========================================================================================================================================================================="""import osimport pandas as pdimport pickleimport geopandas as gpdimport matplotlib.pyplot as pltfrom shapely.geometry import MultiPolygonimport matplotlib.lines as mlinesfrom matplotlib.colors import ListedColormapfrom matplotlib.patches import ArrowStyleimport numpy as npfrom postprocess.eth_colors import ETHColorsclass VisualizationMaps:    def __init__(self,inputScenarios,reloaded=True):        """postprocessing of the results of the optimization"""        self.scenarios = inputScenarios        self.reloaded = reloaded        self.setCommonAttributes()        # plot        if any("self" in scenario for scenario in self.scenarios.keys()):            self.calculateCountryDFSelf()            self.plotFlowsEUMapsSelf()            self.plotSheddingEUMapsSelf()        else:            self.calculateCountryDF()            self.plotGasFlowsEUMaps()            self.plotFlowsEUMaps()            self.plotSheddingEUMaps()            self.plotSheddingCHMaps()        plt.show()        a=1    def setCommonAttributes(self):        """ sets attributes that are common to all scenarios """        plt.rcParams["font.family"] = "arial"        plt.rcParams["font.size"]   = 10        self.ethcolors  = ETHColors()        _firstScenario  = self.scenarios[list(self.scenarios.keys())[0]]        self.analysis   = _firstScenario.analysis        self.folderPath = _firstScenario.folderPath        self.years      = _firstScenario.years        _firstScenario.calculateOptimizationYears()        self.optimizationYears          = _firstScenario.optimizationYears        self.conversionTechnologies     = _firstScenario.setConversionTechnologies        self.electricityTechnologies    = _firstScenario.electricityTechnologies        self.heatTechnologies           = self.conversionTechnologies.index[self.conversionTechnologies["ReferenceCarrier"] == "heat"]        self.storageTechnologiesElectricity = [tech for tech in _firstScenario.system["setStorageTechnologies"] if "natural_gas_storage" not in tech]        self.compareHorizonLengths = True        self.epsMaxShedDemand = 2e-1        # colormaps        self.cmapImport = self.createColormap([self.ethcolors.getColor("blue","dark"),self.ethcolors.getColor("purple","dark")])        self.cmapEle = self.createColormap(self.ethcolors.getColor("blue"))        self.cmapHeat = self.createColormap(self.ethcolors.getColor("red",80))        self.cmapNG = self.createColormap(self.ethcolors.getColor("petrol",80))        # create plot folder        self.plotPath   = self.folderPath + "plots"        if not os.path.exists(self.plotPath):            os.mkdir(self.plotPath)    def createColormap(self,color):        """ creates custom colormap"""        N = 256        vals = np.ones((N,4))        # lowCol = self.ethcolors.getColor("grey",shade=20)        baseCol = [0.98,0.98,0.98]        baseCol = [0.999,0.999,0.999]        # single color        if isinstance(color, tuple):            vals[:, 0] = np.linspace(baseCol[0],color[0], N)            vals[:, 1] = np.linspace(baseCol[1],color[1], N)            vals[:, 2] = np.linspace(baseCol[2],color[2], N)        elif isinstance(color, list):            Ndiv = N/len(color)            Nidx = 0            assert int(Ndiv) == Ndiv, f"requested number {len(color)} of colors does not translate to even step size"            Ndiv = int(Ndiv)            for idxCol,col in enumerate(color):                if idxCol%2 == 0:                    startCol = col                    endCol = baseCol                else:                    startCol = baseCol                    endCol = col                vals[Nidx:Nidx+Ndiv, 0] = np.linspace(startCol[0],endCol[0], Ndiv)                vals[Nidx:Nidx+Ndiv, 1] = np.linspace(startCol[1],endCol[1], Ndiv)                vals[Nidx:Nidx+Ndiv, 2] = np.linspace(startCol[2],endCol[2], Ndiv)                Nidx += Ndiv        else:            raise TypeError        cmap = ListedColormap(vals)        return cmap    def calculateCountryDF(self):        """ calculate dataframes for countries """        # read shapefile        self.setNodes = self.scenarios["short0"].system["setNodes"]        europe = gpd.read_file("outputs/hall_of_fame/Shapefiles/NUTS_RG_03M_2021_3035.shp").set_index("NUTS_ID")        gdfCountries = europe.loc[self.setNodes]        gdfCountries = gdfCountries["geometry"]        minArea = gdfCountries.loc["LU"].area/5 # only include geometries that have at least 20% of the area of LU        for node in gdfCountries.index:            if hasattr(gdfCountries[node], "geoms"):                gdfCountries[node] = MultiPolygon(                    [geom for geom in gdfCountries[node].geoms if                     0.22e7 <= geom.centroid.x <= 0.6e7 and                     0.12e7 <= geom.centroid.y <= 0.56e7 and                     geom.area >= minArea                     ])        self.gdfCountries = gdfCountries.to_frame()        # calculate country df        folderPath = self.scenarios[list(self.scenarios.keys())[0]].folderPath        if self.reloaded or not os.path.exists(folderPath + "countryDF.pickle"):            self.countryDF = {}            _eleDemand0 = self.scenarios["short0"].calculateTotalValue("demandCarrier", "par", elementName="electricity")            _eleDemand100 = self.scenarios["short100"].calculateTotalValue("demandCarrier", "par", elementName="electricity")            cf0 = self.scenarios["short0"].calculateTotalValue("carrierFlow")["power_line"]            cf100 = self.scenarios["short100"].calculateTotalValue("carrierFlow")["power_line"]            import0 = pd.Series(index=self.setNodes,dtype=float)            import100 = pd.Series(index=self.setNodes,dtype=float)            for node in import0.index:                import0[node] = cf0[cf0.index.str.contains("-" + node)].sum() - cf0[cf0.index.str.contains(node + "-")].sum()                import100[node] = cf100[cf100.index.str.contains("-" + node)].sum() - cf100[cf100.index.str.contains(node + "-")].sum()            self.countryDF["electricityImport0"] = import0/_eleDemand0*100            self.countryDF["electricityImport100"] = import100/_eleDemand100*100            self.countryDF["electricity 0"] = ((self.scenarios["short0"].calculateTotalValue("shedDemandCarrierLow",elementName="electricity") + self.scenarios["short0"].calculateTotalValue("shedDemandCarrierHigh",elementName="electricity")) / self.scenarios["short0"].calculateTotalValue("demandCarrier", "par", elementName="electricity")) * 100            # self.countryDF["electricity 50"] = ((self.scenarios["short50"].calculateTotalValue("shedDemandCarrierLow",elementName="electricity") + self.scenarios["short50"].calculateTotalValue("shedDemandCarrierHigh",elementName="electricity")) / self.scenarios["short50"].calculateTotalValue("demandCarrier", "par",elementName="electricity")) * 100            self.countryDF["electricity 100"] = ((self.scenarios["short100"].calculateTotalValue("shedDemandCarrierLow",elementName="electricity") + self.scenarios["short100"].calculateTotalValue("shedDemandCarrierHigh",elementName="electricity")) / self.scenarios["short100"].calculateTotalValue("demandCarrier", "par", elementName="electricity")) * 100            self.countryDF["electricity 100cold"] = ((self.scenarios["short100cold"].calculateTotalValue("shedDemandCarrierLow",elementName="electricity") + self.scenarios["short100cold"].calculateTotalValue("shedDemandCarrierHigh",elementName="electricity")) / self.scenarios["short100cold"].calculateTotalValue("demandCarrier", "par", elementName="electricity")) * 100            self.countryDF["electricity 100warm"] = ((self.scenarios["short100warm"].calculateTotalValue("shedDemandCarrierLow",elementName="electricity") + self.scenarios["short100warm"].calculateTotalValue("shedDemandCarrierHigh",elementName="electricity")) / self.scenarios["short100warm"].calculateTotalValue("demandCarrier", "par", elementName="electricity")) * 100            self.countryDF["heat 0"] = ((self.scenarios["short0"].calculateTotalValue("shedDemandCarrierLow",elementName="heat") + self.scenarios["short0"].calculateTotalValue("shedDemandCarrierHigh", elementName="heat")) / self.scenarios["short0"].calculateTotalValue("demandCarrier", "par", elementName="heat")) * 100            # self.countryDF["heat 50"] = ((self.scenarios["short50"].calculateTotalValue("shedDemandCarrierLow",elementName="heat") + self.scenarios["short50"].calculateTotalValue("shedDemandCarrierHigh", elementName="heat")) / self.scenarios["short50"].calculateTotalValue("demandCarrier", "par",elementName="heat")) * 100            self.countryDF["heat 100"] = ((self.scenarios["short100"].calculateTotalValue("shedDemandCarrierLow",elementName="heat") + self.scenarios["short100"].calculateTotalValue("shedDemandCarrierHigh",elementName="heat")) / self.scenarios["short100"].calculateTotalValue("demandCarrier", "par",elementName="heat")) * 100            self.countryDF["heat 100cold"] = ((self.scenarios["short100cold"].calculateTotalValue("shedDemandCarrierLow",elementName="heat") + self.scenarios["short100cold"].calculateTotalValue("shedDemandCarrierHigh",elementName="heat")) / self.scenarios["short100cold"].calculateTotalValue("demandCarrier", "par",elementName="heat")) * 100            self.countryDF["heat 100warm"] = ((self.scenarios["short100warm"].calculateTotalValue("shedDemandCarrierLow",elementName="heat") + self.scenarios["short100warm"].calculateTotalValue("shedDemandCarrierHigh",elementName="heat")) / self.scenarios["short100warm"].calculateTotalValue("demandCarrier", "par",elementName="heat")) * 100            self.countryDF["natural_gas_industry 0"] = ((self.scenarios["short0"].calculateTotalValue("shedDemandCarrierLow", elementName="natural_gas_industry") + self.scenarios["short0"].calculateTotalValue("shedDemandCarrierHigh", elementName="natural_gas_industry")) / self.scenarios["short0"].calculateTotalValue("demandCarrier", "par", elementName="natural_gas_industry")) * 100            # self.countryDF["natural_gas_industry 50"] = ((self.scenarios["short50"].calculateTotalValue("shedDemandCarrierLow", elementName="natural_gas_industry") + self.scenarios["short50"].calculateTotalValue( "shedDemandCarrierHigh", elementName="natural_gas_industry")) / self.scenarios["short50"].calculateTotalValue("demandCarrier", "par", elementName="natural_gas_industry")) * 100            self.countryDF["natural_gas_industry 100"] = ((self.scenarios["short100"].calculateTotalValue("shedDemandCarrierLow", elementName="natural_gas_industry") + self.scenarios["short100"].calculateTotalValue("shedDemandCarrierHigh",elementName="natural_gas_industry")) / self.scenarios["short100"].calculateTotalValue("demandCarrier","par",elementName="natural_gas_industry")) * 100            self.countryDF["natural_gas_industry 100cold"] = ((self.scenarios["short100cold"].calculateTotalValue("shedDemandCarrierLow", elementName="natural_gas_industry") + self.scenarios["short100cold"].calculateTotalValue("shedDemandCarrierHigh",elementName="natural_gas_industry")) / self.scenarios["short100cold"].calculateTotalValue("demandCarrier","par",elementName="natural_gas_industry")) * 100            self.countryDF["natural_gas_industry 100warm"] = ((self.scenarios["short100warm"].calculateTotalValue("shedDemandCarrierLow", elementName="natural_gas_industry") + self.scenarios["short100warm"].calculateTotalValue("shedDemandCarrierHigh",elementName="natural_gas_industry")) / self.scenarios["short100warm"].calculateTotalValue("demandCarrier","par",elementName="natural_gas_industry")) * 100            # calculate            # calculate flows            self.countryDF["gasFlow0"] = self.scenarios["short0"].calculateTotalValue("carrierFlow", elementName="natural_gas_pipeline")            # self.countryDF["gasFlow50"] = self.scenarios["short50"].calculateTotalValue("carrierFlow", elementName="natural_gas_pipeline")            self.countryDF["gasFlow100"] = self.scenarios["short100"].calculateTotalValue("carrierFlow", elementName="natural_gas_pipeline")            self.countryDF["gasFlow100cold"] = self.scenarios["short100cold"].calculateTotalValue("carrierFlow", elementName="natural_gas_pipeline")            self.countryDF["gasFlow100warm"] = self.scenarios["short100warm"].calculateTotalValue("carrierFlow", elementName="natural_gas_pipeline")            self.countryDF["electricityFlow0"] = self.scenarios["short0"].calculateTotalValue("carrierFlow", elementName="power_line")            # self.countryDF["electricityFlow50"] = self.scenarios["short50"].calculateTotalValue("carrierFlow", elementName="power_line")            self.countryDF["electricityFlow100"] = self.scenarios["short100"].calculateTotalValue("carrierFlow", elementName="power_line")            self.countryDF["electricityFlow100cold"] = self.scenarios["short100cold"].calculateTotalValue("carrierFlow", elementName="power_line")            self.countryDF["electricityFlow100warm"] = self.scenarios["short100warm"].calculateTotalValue("carrierFlow", elementName="power_line")            # natural gas imports            self.countryDF["gasImport0"] = self.scenarios["short0"].calculateTotalValue("importCarrierFlow",elementName="natural_gas") + self.scenarios["short0"].calculateTotalValue("importCarrierFlow",elementName="lng")            # self.countryDF["gasImport50"] = self.scenarios["short50"].calculateTotalValue("importCarrierFlow",elementName="natural_gas") + self.scenarios["short50"].calculateTotalValue("importCarrierFlow",elementName="lng")            self.countryDF["gasImport100"] = self.scenarios["short100"].calculateTotalValue("importCarrierFlow",elementName="natural_gas") + self.scenarios["short100"].calculateTotalValue("importCarrierFlow",elementName="lng")            self.countryDF["gasImport100cold"] = self.scenarios["short100cold"].calculateTotalValue("importCarrierFlow",elementName="natural_gas") + self.scenarios["short100cold"].calculateTotalValue("importCarrierFlow",elementName="lng")            self.countryDF["gasImport100warm"] = self.scenarios["short100warm"].calculateTotalValue("importCarrierFlow",elementName="natural_gas") + self.scenarios["short100warm"].calculateTotalValue("importCarrierFlow",elementName="lng")            with open(folderPath + "countryDF.pickle", "wb") as inputFile:                pickle.dump(self.countryDF, inputFile)        else:            with open(folderPath + "countryDF.pickle", "rb") as inputFile:                self.countryDF = pickle.load(inputFile)        # allocate the flows to the nodes        setEdges = self.countryDF["gasFlow0"].index        edgeNodes = pd.DataFrame.from_records(setEdges.map(lambda edge: tuple(edge.split("-"))), columns=["nodeFrom", "nodeTo"],index=setEdges)        uniqueEdges = pd.DataFrame(columns=["nodeFrom","nodeTo","edgeThere","edgeBack"])        for edge in edgeNodes.index:            if ~((uniqueEdges["nodeFrom"] == edgeNodes.loc[edge,"nodeTo"]) & (uniqueEdges["nodeTo"] == edgeNodes.loc[edge,"nodeFrom"])).any():                uniqueEdges.loc[edge,"nodeFrom"] = edgeNodes.loc[edge,"nodeFrom"]                uniqueEdges.loc[edge,"nodeTo"] = edgeNodes.loc[edge,"nodeTo"]                uniqueEdges.loc[edge,"edgeThere"] = edge                edgeBack = edgeNodes.index[((edgeNodes["nodeFrom"] == edgeNodes.loc[edge,"nodeTo"]) & (edgeNodes["nodeTo"] == edgeNodes.loc[edge,"nodeFrom"]))]                if len(edgeBack) == 1:                    uniqueEdges.loc[edge,"edgeBack"] = edgeBack[0]        self.countryDF["gasFlow0"] = self.calculateFlowBetweenNodes(self.countryDF["gasFlow0"],uniqueEdges)        # self.countryDF["gasFlow50"] = self.calculateFlowBetweenNodes(self.countryDF["gasFlow50"],uniqueEdges)        self.countryDF["gasFlow100"] = self.calculateFlowBetweenNodes(self.countryDF["gasFlow100"],uniqueEdges)        self.countryDF["gasFlow100cold"] = self.calculateFlowBetweenNodes(self.countryDF["gasFlow100cold"],uniqueEdges)        self.countryDF["gasFlow100warm"] = self.calculateFlowBetweenNodes(self.countryDF["gasFlow100warm"],uniqueEdges)        self.countryDF["electricityFlow0"] = self.calculateFlowBetweenNodes(self.countryDF["electricityFlow0"],uniqueEdges)        # self.countryDF["electricityFlow50"] = self.calculateFlowBetweenNodes(self.countryDF["electricityFlow50"],uniqueEdges)        self.countryDF["electricityFlow100"] = self.calculateFlowBetweenNodes(self.countryDF["electricityFlow100"],uniqueEdges)        self.countryDF["electricityFlow100cold"] = self.calculateFlowBetweenNodes(self.countryDF["electricityFlow100cold"],uniqueEdges)        self.countryDF["electricityFlow100warm"] = self.calculateFlowBetweenNodes(self.countryDF["electricityFlow100warm"],uniqueEdges)        # gasFlowMax = max(self.countryDF["gasFlow0"]["flow"].max(),self.countryDF["gasFlow50"]["flow"].max(),self.countryDF["gasFlow100"]["flow"].max())        gasFlowMax = max(self.countryDF["gasFlow0"]["flow"].max(),self.countryDF["gasFlow100"]["flow"].max(),self.countryDF["gasFlow100cold"]["flow"].max(),self.countryDF["gasFlow100warm"]["flow"].max())        # electricityFlowMax = max(self.countryDF["electricityFlow0"]["flow"].max(),self.countryDF["electricityFlow50"]["flow"].max(),self.countryDF["electricityFlow100"]["flow"].max())        electricityFlowMax = max(self.countryDF["electricityFlow0"]["flow"].max(),self.countryDF["electricityFlow100"]["flow"].max(),self.countryDF["electricityFlow100cold"]["flow"].max(),self.countryDF["electricityFlow100warm"]["flow"].max())        self.countryDF["gasFlow0"]["flowRel"] = self.countryDF["gasFlow0"]["flow"]/gasFlowMax        # self.countryDF["gasFlow50"]["flowRel"] = self.countryDF["gasFlow50"]["flow"]/gasFlowMax        self.countryDF["gasFlow100"]["flowRel"] = self.countryDF["gasFlow100"]["flow"]/gasFlowMax        self.countryDF["gasFlow100cold"]["flowRel"] = self.countryDF["gasFlow100cold"]["flow"]/gasFlowMax        self.countryDF["gasFlow100warm"]["flowRel"] = self.countryDF["gasFlow100warm"]["flow"]/gasFlowMax        self.countryDF["electricityFlow0"]["flowRel"] = self.countryDF["electricityFlow0"]["flow"] / electricityFlowMax        # self.countryDF["electricityFlow50"]["flowRel"] = self.countryDF["electricityFlow50"]["flow"] / electricityFlowMax        self.countryDF["electricityFlow100"]["flowRel"] = self.countryDF["electricityFlow100"]["flow"] / electricityFlowMax        self.countryDF["electricityFlow100cold"]["flowRel"] = self.countryDF["electricityFlow100cold"]["flow"] / electricityFlowMax        self.countryDF["electricityFlow100warm"]["flowRel"] = self.countryDF["electricityFlow100warm"]["flow"] / electricityFlowMax        # adjust 100% flows for difference        self.countryDF["gasFlow100"]["flow"] = self.countryDF["gasFlow100"]["flow"] - self.countryDF["gasFlow0"]["flow"]        self.countryDF["gasFlow100"]["flowRel"] = self.countryDF["gasFlow100"]["flow"] / gasFlowMax        self.countryDF["gasFlow100"]["sameDir"] = self.countryDF["gasFlow100"]["nodeTo"] == self.countryDF["gasFlow0"]["nodeTo"]        self.countryDF["electricityFlow100"]["flow"] = self.countryDF["electricityFlow100"]["flow"] - self.countryDF["electricityFlow0"]["flow"]        self.countryDF["electricityFlow100"]["flowRel"] = self.countryDF["electricityFlow100"]["flow"] / electricityFlowMax        self.countryDF["electricityFlow100"]["sameDir"] = self.countryDF["electricityFlow100"]["nodeTo"] == self.countryDF["electricityFlow0"]["nodeTo"]    def calculateCountryDFSelf(self):        """ calculate dataframes for countries - selfish """        # read shapefile        self.setNodes = self.scenarios["short0"].system["setNodes"]        europe = gpd.read_file("outputs/hall_of_fame/Shapefiles/NUTS_RG_03M_2021_3035.shp").set_index("NUTS_ID")        gdfCountries = europe.loc[self.setNodes]        gdfCountries = gdfCountries["geometry"]        minArea = gdfCountries.loc["LU"].area/5 # only include geometries that have at least 20% of the area of LU        for node in gdfCountries.index:            if hasattr(gdfCountries[node], "geoms"):                gdfCountries[node] = MultiPolygon(                    [geom for geom in gdfCountries[node].geoms if                     0.22e7 <= geom.centroid.x <= 0.6e7 and                     0.12e7 <= geom.centroid.y <= 0.56e7 and                     geom.area >= minArea                     ])        self.gdfCountries = gdfCountries.to_frame()        # calculate country df        folderPath = self.scenarios[list(self.scenarios.keys())[0]].folderPath        if self.reloaded or not os.path.exists(folderPath + "countryDF.pickle"):            self.countryDF = {}            _eleDemand0 = self.scenarios["short0"].calculateTotalValue("demandCarrier", "par", elementName="electricity")            _eleDemand100 = self.scenarios["short100"].calculateTotalValue("demandCarrier", "par", elementName="electricity")            cf0 = self.scenarios["short0"].calculateTotalValue("carrierFlow")["power_line"]            cf100 = self.scenarios["short100"].calculateTotalValue("carrierFlow")["power_line"]            cf0self = self.scenarios["short0self"].calculateTotalValue("carrierFlow")["power_line"]            cf100self = self.scenarios["short100self"].calculateTotalValue("carrierFlow")["power_line"]            import0 = pd.Series(index=self.setNodes,dtype=float)            import100 = pd.Series(index=self.setNodes,dtype=float)            import0self = pd.Series(index=self.setNodes,dtype=float)            import100self = pd.Series(index=self.setNodes,dtype=float)            for node in import0.index:                import0[node] = cf0[cf0.index.str.contains("-" + node)].sum() - cf0[cf0.index.str.contains(node + "-")].sum()                import100[node] = cf100[cf100.index.str.contains("-" + node)].sum() - cf100[cf100.index.str.contains(node + "-")].sum()                import0self[node] = cf0self[cf0self.index.str.contains("-" + node)].sum() - cf0self[cf0self.index.str.contains(node + "-")].sum()                import100self[node] = cf100self[cf100self.index.str.contains("-" + node)].sum() - cf100self[cf100self.index.str.contains(node + "-")].sum()            self.countryDF["electricityImport0"] = import0/_eleDemand0*100            self.countryDF["electricityImport100"] = import100/_eleDemand100*100            self.countryDF["electricityImport0self"] = import0self/_eleDemand0*100            self.countryDF["electricityImport100self"] = import100self/_eleDemand100*100            self.countryDF["electricity 0"] = ((self.scenarios["short0"].calculateTotalValue("shedDemandCarrierLow",elementName="electricity") + self.scenarios["short0"].calculateTotalValue("shedDemandCarrierHigh",elementName="electricity")) / self.scenarios["short0"].calculateTotalValue("demandCarrier", "par", elementName="electricity")) * 100            # self.countryDF["electricity 50"] = ((self.scenarios["short50"].calculateTotalValue("shedDemandCarrierLow",elementName="electricity") + self.scenarios["short50"].calculateTotalValue("shedDemandCarrierHigh",elementName="electricity")) / self.scenarios["short50"].calculateTotalValue("demandCarrier", "par",elementName="electricity")) * 100            self.countryDF["electricity 100"] = ((self.scenarios["short100"].calculateTotalValue("shedDemandCarrierLow",elementName="electricity") + self.scenarios["short100"].calculateTotalValue("shedDemandCarrierHigh",elementName="electricity")) / self.scenarios["short100"].calculateTotalValue("demandCarrier", "par", elementName="electricity")) * 100            self.countryDF["electricity 100self"] = ((self.scenarios["short100self"].calculateTotalValue("shedDemandCarrierLow",elementName="electricity") + self.scenarios["short100self"].calculateTotalValue("shedDemandCarrierHigh",elementName="electricity")) / self.scenarios["short100self"].calculateTotalValue("demandCarrier", "par", elementName="electricity")) * 100            self.countryDF["electricity 0self"] = ((self.scenarios["short0self"].calculateTotalValue("shedDemandCarrierLow",elementName="electricity") + self.scenarios["short0self"].calculateTotalValue("shedDemandCarrierHigh",elementName="electricity")) / self.scenarios["short0self"].calculateTotalValue("demandCarrier", "par", elementName="electricity")) * 100            self.countryDF["heat 0"] = ((self.scenarios["short0"].calculateTotalValue("shedDemandCarrierLow",elementName="heat") + self.scenarios["short0"].calculateTotalValue("shedDemandCarrierHigh", elementName="heat")) / self.scenarios["short0"].calculateTotalValue("demandCarrier", "par", elementName="heat")) * 100            # self.countryDF["heat 50"] = ((self.scenarios["short50"].calculateTotalValue("shedDemandCarrierLow",elementName="heat") + self.scenarios["short50"].calculateTotalValue("shedDemandCarrierHigh", elementName="heat")) / self.scenarios["short50"].calculateTotalValue("demandCarrier", "par",elementName="heat")) * 100            self.countryDF["heat 100"] = ((self.scenarios["short100"].calculateTotalValue("shedDemandCarrierLow",elementName="heat") + self.scenarios["short100"].calculateTotalValue("shedDemandCarrierHigh",elementName="heat")) / self.scenarios["short100"].calculateTotalValue("demandCarrier", "par",elementName="heat")) * 100            self.countryDF["heat 100self"] = ((self.scenarios["short100self"].calculateTotalValue("shedDemandCarrierLow",elementName="heat") + self.scenarios["short100self"].calculateTotalValue("shedDemandCarrierHigh",elementName="heat")) / self.scenarios["short100self"].calculateTotalValue("demandCarrier", "par",elementName="heat")) * 100            self.countryDF["heat 0self"] = ((self.scenarios["short0self"].calculateTotalValue("shedDemandCarrierLow",elementName="heat") + self.scenarios["short0self"].calculateTotalValue("shedDemandCarrierHigh",elementName="heat")) / self.scenarios["short0self"].calculateTotalValue("demandCarrier", "par",elementName="heat")) * 100            self.countryDF["natural_gas_industry 0"] = ((self.scenarios["short0"].calculateTotalValue("shedDemandCarrierLow", elementName="natural_gas_industry") + self.scenarios["short0"].calculateTotalValue("shedDemandCarrierHigh", elementName="natural_gas_industry")) / self.scenarios["short0"].calculateTotalValue("demandCarrier", "par", elementName="natural_gas_industry")) * 100            # self.countryDF["natural_gas_industry 50"] = ((self.scenarios["short50"].calculateTotalValue("shedDemandCarrierLow", elementName="natural_gas_industry") + self.scenarios["short50"].calculateTotalValue( "shedDemandCarrierHigh", elementName="natural_gas_industry")) / self.scenarios["short50"].calculateTotalValue("demandCarrier", "par", elementName="natural_gas_industry")) * 100            self.countryDF["natural_gas_industry 100"] = ((self.scenarios["short100"].calculateTotalValue("shedDemandCarrierLow", elementName="natural_gas_industry") + self.scenarios["short100"].calculateTotalValue("shedDemandCarrierHigh",elementName="natural_gas_industry")) / self.scenarios["short100"].calculateTotalValue("demandCarrier","par",elementName="natural_gas_industry")) * 100            self.countryDF["natural_gas_industry 100self"] = ((self.scenarios["short100self"].calculateTotalValue("shedDemandCarrierLow", elementName="natural_gas_industry") + self.scenarios["short100self"].calculateTotalValue("shedDemandCarrierHigh",elementName="natural_gas_industry")) / self.scenarios["short100self"].calculateTotalValue("demandCarrier","par",elementName="natural_gas_industry")) * 100            self.countryDF["natural_gas_industry 0self"] = ((self.scenarios["short0self"].calculateTotalValue("shedDemandCarrierLow", elementName="natural_gas_industry") + self.scenarios["short0self"].calculateTotalValue("shedDemandCarrierHigh",elementName="natural_gas_industry")) / self.scenarios["short0self"].calculateTotalValue("demandCarrier","par",elementName="natural_gas_industry")) * 100            # calculate            # calculate flows            self.countryDF["gasFlow0"] = self.scenarios["short0"].calculateTotalValue("carrierFlow", elementName="natural_gas_pipeline")            # self.countryDF["gasFlow50"] = self.scenarios["short50"].calculateTotalValue("carrierFlow", elementName="natural_gas_pipeline")            self.countryDF["gasFlow100"] = self.scenarios["short100"].calculateTotalValue("carrierFlow", elementName="natural_gas_pipeline")            self.countryDF["gasFlow100self"] = self.scenarios["short100self"].calculateTotalValue("carrierFlow", elementName="natural_gas_pipeline")            self.countryDF["gasFlow0self"] = self.scenarios["short0self"].calculateTotalValue("carrierFlow", elementName="natural_gas_pipeline")            self.countryDF["electricityFlow0"] = self.scenarios["short0"].calculateTotalValue("carrierFlow", elementName="power_line")            # self.countryDF["electricityFlow50"] = self.scenarios["short50"].calculateTotalValue("carrierFlow", elementName="power_line")            self.countryDF["electricityFlow100"] = self.scenarios["short100"].calculateTotalValue("carrierFlow", elementName="power_line")            self.countryDF["electricityFlow100self"] = self.scenarios["short100self"].calculateTotalValue("carrierFlow", elementName="power_line")            self.countryDF["electricityFlow0self"] = self.scenarios["short0self"].calculateTotalValue("carrierFlow", elementName="power_line")            # natural gas imports            self.countryDF["gasImport0"] = self.scenarios["short0"].calculateTotalValue("importCarrierFlow",elementName="natural_gas") + self.scenarios["short0"].calculateTotalValue("importCarrierFlow",elementName="lng")            # self.countryDF["gasImport50"] = self.scenarios["short50"].calculateTotalValue("importCarrierFlow",elementName="natural_gas") + self.scenarios["short50"].calculateTotalValue("importCarrierFlow",elementName="lng")            self.countryDF["gasImport100"] = self.scenarios["short100"].calculateTotalValue("importCarrierFlow",elementName="natural_gas") + self.scenarios["short100"].calculateTotalValue("importCarrierFlow",elementName="lng")            self.countryDF["gasImport100self"] = self.scenarios["short100self"].calculateTotalValue("importCarrierFlow",elementName="natural_gas") + self.scenarios["short100self"].calculateTotalValue("importCarrierFlow",elementName="lng")            self.countryDF["gasImport0self"] = self.scenarios["short0self"].calculateTotalValue("importCarrierFlow",elementName="natural_gas") + self.scenarios["short0self"].calculateTotalValue("importCarrierFlow",elementName="lng")            with open(folderPath + "countryDF.pickle", "wb") as inputFile:                pickle.dump(self.countryDF, inputFile)        else:            with open(folderPath + "countryDF.pickle", "rb") as inputFile:                self.countryDF = pickle.load(inputFile)        # allocate the flows to the nodes        setEdges = self.countryDF["gasFlow0"].index        edgeNodes = pd.DataFrame.from_records(setEdges.map(lambda edge: tuple(edge.split("-"))), columns=["nodeFrom", "nodeTo"],index=setEdges)        uniqueEdges = pd.DataFrame(columns=["nodeFrom","nodeTo","edgeThere","edgeBack"])        for edge in edgeNodes.index:            if ~((uniqueEdges["nodeFrom"] == edgeNodes.loc[edge,"nodeTo"]) & (uniqueEdges["nodeTo"] == edgeNodes.loc[edge,"nodeFrom"])).any():                uniqueEdges.loc[edge,"nodeFrom"] = edgeNodes.loc[edge,"nodeFrom"]                uniqueEdges.loc[edge,"nodeTo"] = edgeNodes.loc[edge,"nodeTo"]                uniqueEdges.loc[edge,"edgeThere"] = edge                edgeBack = edgeNodes.index[((edgeNodes["nodeFrom"] == edgeNodes.loc[edge,"nodeTo"]) & (edgeNodes["nodeTo"] == edgeNodes.loc[edge,"nodeFrom"]))]                if len(edgeBack) == 1:                    uniqueEdges.loc[edge,"edgeBack"] = edgeBack[0]        self.countryDF["gasFlow0"] = self.calculateFlowBetweenNodes(self.countryDF["gasFlow0"],uniqueEdges)        # self.countryDF["gasFlow50"] = self.calculateFlowBetweenNodes(self.countryDF["gasFlow50"],uniqueEdges)        self.countryDF["gasFlow100"] = self.calculateFlowBetweenNodes(self.countryDF["gasFlow100"],uniqueEdges)        self.countryDF["gasFlow100self"] = self.calculateFlowBetweenNodes(self.countryDF["gasFlow100self"],uniqueEdges)        self.countryDF["gasFlow0self"] = self.calculateFlowBetweenNodes(self.countryDF["gasFlow0self"],uniqueEdges)        self.countryDF["electricityFlow0"] = self.calculateFlowBetweenNodes(self.countryDF["electricityFlow0"],uniqueEdges)        # self.countryDF["electricityFlow50"] = self.calculateFlowBetweenNodes(self.countryDF["electricityFlow50"],uniqueEdges)        self.countryDF["electricityFlow100"] = self.calculateFlowBetweenNodes(self.countryDF["electricityFlow100"],uniqueEdges)        self.countryDF["electricityFlow100self"] = self.calculateFlowBetweenNodes(self.countryDF["electricityFlow100self"],uniqueEdges)        self.countryDF["electricityFlow0self"] = self.calculateFlowBetweenNodes(self.countryDF["electricityFlow0self"],uniqueEdges)        # gasFlowMax = max(self.countryDF["gasFlow0"]["flow"].max(),self.countryDF["gasFlow50"]["flow"].max(),self.countryDF["gasFlow100"]["flow"].max())        gasFlowMax = max(self.countryDF["gasFlow0"]["flow"].max(),self.countryDF["gasFlow100"]["flow"].max(),self.countryDF["gasFlow100self"]["flow"].max(),self.countryDF["gasFlow0self"]["flow"].max())        # electricityFlowMax = max(self.countryDF["electricityFlow0"]["flow"].max(),self.countryDF["electricityFlow50"]["flow"].max(),self.countryDF["electricityFlow100"]["flow"].max())        electricityFlowMax = max(self.countryDF["electricityFlow0"]["flow"].max(),self.countryDF["electricityFlow100"]["flow"].max(),self.countryDF["electricityFlow100self"]["flow"].max(),self.countryDF["electricityFlow0self"]["flow"].max())        self.countryDF["gasFlow0"]["flowRel"] = self.countryDF["gasFlow0"]["flow"]/gasFlowMax        # self.countryDF["gasFlow50"]["flowRel"] = self.countryDF["gasFlow50"]["flow"]/gasFlowMax        self.countryDF["gasFlow100"]["flowRel"] = self.countryDF["gasFlow100"]["flow"]/gasFlowMax        self.countryDF["gasFlow100self"]["flowRel"] = self.countryDF["gasFlow100self"]["flow"]/gasFlowMax        self.countryDF["gasFlow0self"]["flowRel"] = self.countryDF["gasFlow0self"]["flow"]/gasFlowMax        self.countryDF["electricityFlow0"]["flowRel"] = self.countryDF["electricityFlow0"]["flow"] / electricityFlowMax        # self.countryDF["electricityFlow50"]["flowRel"] = self.countryDF["electricityFlow50"]["flow"] / electricityFlowMax        self.countryDF["electricityFlow100"]["flowRel"] = self.countryDF["electricityFlow100"]["flow"] / electricityFlowMax        self.countryDF["electricityFlow100self"]["flowRel"] = self.countryDF["electricityFlow100self"]["flow"] / electricityFlowMax        self.countryDF["electricityFlow0self"]["flowRel"] = self.countryDF["electricityFlow0self"]["flow"] / electricityFlowMax        # adjust 100% flows for difference        self.countryDF["gasFlow100self"]["flow"] = self.countryDF["gasFlow100self"]["flow"] - self.countryDF["gasFlow100"]["flow"]        self.countryDF["gasFlow100self"]["flowRel"] = self.countryDF["gasFlow100self"]["flow"] / gasFlowMax        self.countryDF["gasFlow100self"]["sameDir"] = self.countryDF["gasFlow100self"]["nodeTo"] == self.countryDF["gasFlow100"]["nodeTo"]        self.countryDF["electricityFlow100self"]["flow"] = self.countryDF["electricityFlow100self"]["flow"] - self.countryDF["electricityFlow100"]["flow"]        self.countryDF["electricityFlow100self"]["flowRel"] = self.countryDF["electricityFlow100self"]["flow"] / electricityFlowMax        self.countryDF["electricityFlow100self"]["sameDir"] = self.countryDF["electricityFlow100self"]["nodeTo"] == self.countryDF["electricityFlow100"]["nodeTo"]    def calculateFlowBetweenNodes(self,flowSeries,uniqueEdges):        """ calculates the flows between nodes and returns flow dataframe """        nodeFlowSeries = pd.Series(flowSeries[uniqueEdges["edgeThere"]].values-flowSeries[uniqueEdges["edgeBack"]].values,index = uniqueEdges.index,name="flow")        flowDF = pd.concat([uniqueEdges,nodeFlowSeries],axis=1)        negFlow = flowDF[flowDF["flow"] < 0]        for edge in negFlow.index:            flowDF.loc[edge,"nodeFrom"] = negFlow.loc[edge,"nodeTo"]            flowDF.loc[edge,"nodeTo"] = negFlow.loc[edge,"nodeFrom"]            flowDF.loc[edge,"edgeThere"] = negFlow.loc[edge,"edgeBack"]            flowDF.loc[edge,"edgeBack"] = negFlow.loc[edge,"edgeThere"]            flowDF.loc[edge,"flow"] = negFlow.loc[edge,"flow"]*(-1)        # add coordinates        flowDF["xFrom"] = self.gdfCountries.loc[flowDF["nodeFrom"],"geometry"].centroid.x.values        flowDF["xTo"] = self.gdfCountries.loc[flowDF["nodeTo"],"geometry"].centroid.x.values        flowDF["yFrom"] = self.gdfCountries.loc[flowDF["nodeFrom"],"geometry"].centroid.y.values        flowDF["yTo"] = self.gdfCountries.loc[flowDF["nodeTo"],"geometry"].centroid.y.values        return flowDF    def plotFlowsEUMaps(self):        """ plots maps """        # get countries        gdfCountries = self.gdfCountries.copy()        gdfCountries["gasImport0"] = self.countryDF["gasImport0"][self.setNodes]/1000        gdfCountries["gasImport100"] = self.countryDF["gasImport100"][self.setNodes]/1000        gdfCountries["electricityImport0"] = self.countryDF["electricityImport0"][self.setNodes]        gdfCountries["electricityImport100"] = self.countryDF["electricityImport100"][self.setNodes]        # plot        fig = plt.figure(figsize=(9, 9), dpi=100,constrained_layout =True)        rows = fig.subfigures(2,1)        axsNG = rows[0].subplots(1, 2)        axsEle = rows[1].subplots(1,2)        vmin = 0        vmaxGas = 100 * np.ceil((gdfCountries.loc[gdfCountries.index.difference(["NO"]), gdfCountries.columns.str.contains("gasImport")].max().max()+50) / 100)        vminmaxEle = 5*np.ceil(max(-gdfCountries.loc[:, gdfCountries.columns.str.contains("electricityImport")].min().min(),gdfCountries.loc[:, gdfCountries.columns.str.contains("electricityImport")].max().max())/5)        vminEle = -vminmaxEle        vmaxEle = vminmaxEle        normGas = plt.Normalize(vmin=vmin, vmax=vmaxGas)        normEle = plt.Normalize(vmin=vminEle, vmax=vmaxEle)        gdfCountries.plot(ax=axsNG[0], column="gasImport0", edgecolor='grey', linewidth=0.5, cmap=self.cmapNG,norm=normGas)        gdfCountries.plot(ax=axsNG[1], column="gasImport100", edgecolor='grey', linewidth=0.5, cmap=self.cmapNG,norm=normGas)        # gdfCountries.plot(ax=axsNG[2],color='white', edgecolor='grey')        gdfCountries.plot(ax=axsEle[0],column="electricityImport0", edgecolor='grey',linewidth=0.5,cmap=self.cmapImport,norm=normEle)        gdfCountries.plot(ax=axsEle[1], column="electricityImport100", edgecolor='grey', linewidth=0.5,cmap=self.cmapImport, norm=normEle)        # gdfCountries.plot(ax=axsEle[2],color='white', edgecolor='grey')        axsNG[0].set_title("Russian gas available")        # axsEle[1].set_title("50% Reduction")        axsNG[1].set_title("No Russian gas available")        rows[0].suptitle("Natural gas")        rows[1].suptitle("Electricity")        # plot arrows        for idxCarr, carr in enumerate(["gasFlow","electricityFlow"]):            for idxScen,scen in enumerate([0,100]):                flowDF = self.countryDF[carr+str(scen)]                if carr == "electricityFlow":                    flowDF = flowDF[flowDF["flowRel"].abs() > 0.05]                else:                    flowDF = flowDF[flowDF["flowRel"].abs() > 0.05]                axis = rows[idxCarr].get_axes()[idxScen]                for edge in flowDF.index:                    scale = (np.abs(flowDF.loc[edge, "flowRel"])**0.5)                    arrowprops = dict(                            arrowstyle = ArrowStyle.Simple(head_width = scale**0.5,head_length = scale**0.5,tail_width=.2),                            mutation_scale=scale* 12,                            shrinkA = 0,                            shrinkB = 0,                            lw=0                        )                    if scen == 100:                        # same direction                        if flowDF.loc[edge, "sameDir"]:                            # increase in flow                            if flowDF.loc[edge, "flowRel"] > 0:                                arrowprops["color"] = self.ethcolors.getColor("green")                            # decrease in flow but same direction                            else:                                arrowprops["color"] = self.ethcolors.getColor("bronze", 80)                        # change in direction                        else:                            arrowprops["color"] = self.ethcolors.getColor("red")                    else:                        arrowprops["color"] = self.ethcolors.getColor("grey","dark")                    axis.annotate("",                        # ax = axsArrows[idx],                        xy=(flowDF.loc[edge,"xTo"],flowDF.loc[edge,"yTo"]),                        xytext=(flowDF.loc[edge,"xFrom"],flowDF.loc[edge,"yFrom"]),                        xycoords='data',                        textcoords='data',                        arrowprops=arrowprops                    )        for row in rows:            for ax in row.get_axes():                ax.axis("off")        plt.xticks([])        plt.yticks([])        cbEle = fig.colorbar(axsEle[1].collections[0], ax=axsEle, label="Exchanged electricity (exports (-) and imports (+)) [% of demand]")        cbNG = fig.colorbar(axsNG[1].collections[0], ax=axsNG, label="Produced and imported gas from outside the energy system [TWh/year]")        # change ticks        ticksNG = [str(int(tick)) for tick in cbNG.get_ticks()]        ticksNG[-1] = "> "+ticksNG[-1]        cbNG.set_ticks(cbNG.get_ticks())        cbNG.set_ticklabels(ticksNG)        ticksEle = np.linspace(vminEle,vmaxEle,7)        cbEle.set_ticks(ticksEle)        # save        plt.savefig(f"{self.plotPath}/EUFlowMaps.pdf", format="pdf", bbox_inches="tight")        plt.savefig(f"{self.plotPath}/EUFlowMaps.svg", format="svg", bbox_inches="tight")    def plotFlowsEUMapsSelf(self):        """ plots maps - selfish"""        # get countries        gdfCountries = self.gdfCountries.copy()        gdfCountries["gasImport100self"] = self.countryDF["gasImport100self"][self.setNodes]/1000        gdfCountries["gasImport100"] = self.countryDF["gasImport100"][self.setNodes]/1000        gdfCountries["electricityImport100self"] = self.countryDF["electricityImport100self"][self.setNodes]        gdfCountries["electricityImport100"] = self.countryDF["electricityImport100"][self.setNodes]        # plot        fig = plt.figure(figsize=(9, 9), dpi=100,constrained_layout =True)        rows = fig.subfigures(2,1)        axsNG = rows[0].subplots(1, 2)        axsEle = rows[1].subplots(1,2)        vmin = 0        vmaxGas = 100 * np.ceil((gdfCountries.loc[gdfCountries.index.difference(["NO"]), gdfCountries.columns.str.contains("gasImport")].max().max()+50) / 100)        vminmaxEle = 5*np.ceil(max(-gdfCountries.loc[:, gdfCountries.columns.str.contains("electricityImport")].min().min(),gdfCountries.loc[:, gdfCountries.columns.str.contains("electricityImport")].max().max())/5)        vminEle = -vminmaxEle        vmaxEle = vminmaxEle        normGas = plt.Normalize(vmin=vmin, vmax=vmaxGas)        normEle = plt.Normalize(vmin=vminEle, vmax=vmaxEle)        gdfCountries.plot(ax=axsNG[0], column="gasImport100", edgecolor='grey', linewidth=0.5, cmap=self.cmapNG,norm=normGas)        gdfCountries.plot(ax=axsNG[1], column="gasImport100self", edgecolor='grey', linewidth=0.5, cmap=self.cmapNG,norm=normGas)        # gdfCountries.plot(ax=axsNG[2],color='white', edgecolor='grey')        gdfCountries.plot(ax=axsEle[0],column="electricityImport100", edgecolor='grey',linewidth=0.5,cmap=self.cmapImport,norm=normEle)        gdfCountries.plot(ax=axsEle[1], column="electricityImport100self", edgecolor='grey', linewidth=0.5,cmap=self.cmapImport, norm=normEle)        # gdfCountries.plot(ax=axsEle[2],color='white', edgecolor='grey')        axsNG[0].set_title("No Russian gas available - cooperative")        # axsEle[1].set_title("50% Reduction")        axsNG[1].set_title("No Russian gas available - selfish")        rows[0].suptitle("Natural gas")        rows[1].suptitle("Electricity")        # plot arrows        for idxCarr, carr in enumerate(["gasFlow","electricityFlow"]):            for idxScen,scen in enumerate(["100","100self"]):                flowDF = self.countryDF[carr+str(scen)]                if carr == "electricityFlow":                    flowDF = flowDF[flowDF["flowRel"].abs() > 0.005]                else:                    flowDF = flowDF[flowDF["flowRel"].abs() > 0.005]                axis = rows[idxCarr].get_axes()[idxScen]                for edge in flowDF.index:                    scale = (np.abs(flowDF.loc[edge, "flowRel"])**0.5)                    arrowprops = dict(                            arrowstyle = ArrowStyle.Simple(head_width = scale**0.5,head_length = scale**0.5,tail_width=.2),                            mutation_scale=scale* 12,                            shrinkA = 0,                            shrinkB = 0,                            lw=0                        )                    if scen == "100self":                        # same direction                        if flowDF.loc[edge, "sameDir"]:                            # increase in flow                            if flowDF.loc[edge, "flowRel"] > 0:                                arrowprops["color"] = self.ethcolors.getColor("green")                            # decrease in flow but same direction                            else:                                arrowprops["color"] = self.ethcolors.getColor("bronze", 80)                        # change in direction                        else:                            arrowprops["color"] = self.ethcolors.getColor("red")                    else:                        arrowprops["color"] = self.ethcolors.getColor("grey","dark")                    axis.annotate("",                        # ax = axsArrows[idx],                        xy=(flowDF.loc[edge,"xTo"],flowDF.loc[edge,"yTo"]),                        xytext=(flowDF.loc[edge,"xFrom"],flowDF.loc[edge,"yFrom"]),                        xycoords='data',                        textcoords='data',                        arrowprops=arrowprops                    )        for row in rows:            for ax in row.get_axes():                ax.axis("off")        plt.xticks([])        plt.yticks([])        cbEle = fig.colorbar(axsEle[1].collections[0], ax=axsEle, label="Exchanged electricity (exports (-) and imports (+)) [% of demand]")        cbNG = fig.colorbar(axsNG[1].collections[0], ax=axsNG, label="Produced and imported gas from outside the energy system [TWh/year]")        # change ticks        ticksNG = [str(int(tick)) for tick in cbNG.get_ticks()]        ticksNG[-1] = "> "+ticksNG[-1]        cbNG.set_ticks(cbNG.get_ticks())        cbNG.set_ticklabels(ticksNG)        ticksEle = np.linspace(vminEle,vmaxEle,7)        cbEle.set_ticks(ticksEle)        # save        plt.savefig(f"{self.plotPath}/EUFlowMapsSelfish.pdf", format="pdf", bbox_inches="tight")        plt.savefig(f"{self.plotPath}/EUFlowMapsSelfish.svg", format="svg", bbox_inches="tight")    def plotGasFlowsEUMaps(self):        """ plots gas flow maps """        # get countries        gdfCountries = self.gdfCountries.copy()        gdfCountries["gasImport0"] = self.countryDF["gasImport0"][self.setNodes]/1000        gdfCountries["gasImport100"] = self.countryDF["gasImport100"][self.setNodes]/1000        # plot        fig,ax = plt.subplots(1,2, figsize=(9, 5), dpi=100,constrained_layout =True)        vmin = 0        vmaxGas = 100 * np.ceil((gdfCountries.loc[gdfCountries.index.difference(["NO"]), gdfCountries.columns.str.contains("gasImport")].max().max()+50) / 100)        normGas = plt.Normalize(vmin=vmin, vmax=vmaxGas)        gdfCountries.plot(ax=ax[0], column="gasImport0", edgecolor='grey', linewidth=0.5, cmap=self.cmapNG,norm=normGas)        gdfCountries.plot(ax=ax[1], column="gasImport100", edgecolor='grey', linewidth=0.5, cmap=self.cmapNG,norm=normGas)        ax[0].set_title("Russian gas available")        # axsEle[1].set_title("50% Reduction")        ax[1].set_title("No Russian gas available")        # plot arrows        for idxScen,scen in enumerate([0,100]):            flowDF = self.countryDF["gasFlow"+str(scen)]            flowDF = flowDF[flowDF["flowRel"].abs() > 0.05]            axis = ax[idxScen]            for edge in flowDF.index:                scale = (np.abs(flowDF.loc[edge, "flowRel"])**0.5)                arrowprops = dict(                        arrowstyle = ArrowStyle.Simple(head_width = scale**0.5,head_length = scale**0.5,tail_width=.2),                        mutation_scale=scale* 12,                        shrinkA = 0,                        shrinkB = 0,                        lw=0                    )                if scen == 100:                    # same direction                    if flowDF.loc[edge, "sameDir"]:                        # increase in flow                        if flowDF.loc[edge, "flowRel"] > 0:                            arrowprops["color"] = self.ethcolors.getColor("green")                        # decrease in flow but same direction                        else:                            arrowprops["color"] = self.ethcolors.getColor("bronze", 80)                    # change in direction                    else:                        arrowprops["color"] = self.ethcolors.getColor("red")                else:                    arrowprops["color"] = self.ethcolors.getColor("grey","dark")                axis.annotate("",                    # ax = axsArrows[idx],                    xy=(flowDF.loc[edge,"xTo"],flowDF.loc[edge,"yTo"]),                    xytext=(flowDF.loc[edge,"xFrom"],flowDF.loc[edge,"yFrom"]),                    xycoords='data',                    textcoords='data',                    arrowprops=arrowprops                )        ax[0].axis("off")        ax[1].axis("off")        plt.xticks([])        plt.yticks([])        cbNG = fig.colorbar(ax[1].collections[0], ax=ax, label="Produced and imported gas from outside the energy system [TWh/year]")        # change ticks        ticksNG = [str(int(tick)) for tick in cbNG.get_ticks()]        ticksNG[-1] = "> "+ticksNG[-1]        cbNG.set_ticks(cbNG.get_ticks())        cbNG.set_ticklabels(ticksNG)        # save        plt.savefig(f"{self.plotPath}/EUGasFlowMaps.pdf", format="pdf", bbox_inches="tight")        plt.savefig(f"{self.plotPath}/EUGasFlowMaps.svg", format="svg", bbox_inches="tight")    def plotSheddingEUMaps(self):        """ plots maps """        # get countries        gdfCountries = self.gdfCountries.copy()        # write load shedding data        gdfCountries["electricity 100warm"] = self.countryDF["electricity 100warm"][self.setNodes]        gdfCountries["electricity 100"] = self.countryDF["electricity 100"][self.setNodes]        gdfCountries["electricity 100cold"] = self.countryDF["electricity 100cold"][self.setNodes]        gdfCountries["heat 100warm"] = self.countryDF["heat 100warm"][self.setNodes]        gdfCountries["heat 100"] = self.countryDF["heat 100"][self.setNodes]        gdfCountries["heat 100cold"] = self.countryDF["heat 100cold"][self.setNodes]        gdfCountries["natural_gas_industry 100warm"] = self.countryDF["natural_gas_industry 100warm"][self.setNodes]        gdfCountries["natural_gas_industry 100"] = self.countryDF["natural_gas_industry 100"][self.setNodes]        gdfCountries["natural_gas_industry 100cold"] = self.countryDF["natural_gas_industry 100cold"][self.setNodes]        # calculate flows        _gasFlow0 = self.scenarios["short0"].calculateTotalValue("carrierFlow",elementName="natural_gas_pipeline")        _gasFlow50 = self.scenarios["short100"].calculateTotalValue("carrierFlow",elementName="natural_gas_pipeline")        _gasFlow100 = self.scenarios["short100cold"].calculateTotalValue("carrierFlow",elementName="natural_gas_pipeline")        # plot        # fig, axes = plt.subplots(nrows=3,ncols=3,sharex=True,sharey=True)        fig = plt.figure(figsize=(9, 9), dpi=100,constrained_layout =True)        rows = fig.subfigures(3,1)        axsEle = rows[0].subplots(1,3)        axsNGI = rows[1].subplots(1, 3)        axsHeat = rows[2].subplots(1,3)        # axsArrows = rows[3].subplots(1,3)        vmin = 0        vmaxEle = 10*np.round(gdfCountries.loc[:,gdfCountries.columns.str.contains("electricity")].max().max()/10)        vmaxHeat = 10*np.round(gdfCountries.loc[:,gdfCountries.columns.str.contains("heat")].max().max()/10)        vmaxNGI = 10*np.round(gdfCountries.loc[:,gdfCountries.columns.str.contains("natural_gas_industry")].max().max()/10)        normEle = plt.Normalize(vmin = vmin,vmax = vmaxEle)        normHeat = plt.Normalize(vmin = vmin,vmax = vmaxHeat)        normNGI = plt.Normalize(vmin = vmin,vmax = vmaxNGI)        # plot heat maps        gdfCountries.plot(ax=axsEle[0],column="electricity 100warm", edgecolor='grey',linewidth=0.5,cmap=self.cmapEle, norm=normEle)        gdfCountries.plot(ax=axsEle[1],column="electricity 100", edgecolor='grey',linewidth=0.5,cmap=self.cmapEle, norm=normEle)        gdfCountries.plot(ax=axsEle[2],column="electricity 100cold", edgecolor='grey',linewidth=0.5,cmap=self.cmapEle, norm=normEle)        gdfCountries.plot(ax=axsNGI[0],column="natural_gas_industry 100warm", edgecolor='grey',linewidth=0.5,cmap=self.cmapNG, norm=normNGI)        gdfCountries.plot(ax=axsNGI[1],column="natural_gas_industry 100", edgecolor='grey',linewidth=0.5,cmap=self.cmapNG, norm=normNGI)        gdfCountries.plot(ax=axsNGI[2],column="natural_gas_industry 100cold", edgecolor='grey',linewidth=0.5,cmap=self.cmapNG, norm=normNGI)        gdfCountries.plot(ax=axsHeat[0], column="heat 100warm", edgecolor='grey',linewidth=0.5, cmap=self.cmapHeat, norm=normHeat)        gdfCountries.plot(ax=axsHeat[1], column="heat 100", edgecolor='grey',linewidth=0.5, cmap=self.cmapHeat, norm=normHeat)        gdfCountries.plot(ax=axsHeat[2], column="heat 100cold", edgecolor='grey',linewidth=0.5, cmap=self.cmapHeat, norm=normHeat)        # plot hatches        maxShedDemand = self.scenarios["short0"].extractDataFromRaw("maxShedDemandLow", "par")[["electricity","natural_gas_industry","heat"]]*100 + self.epsMaxShedDemand        gdfCountries[gdfCountries["electricity 100warm"]>maxShedDemand["electricity"]].plot(ax=axsEle[0], column="electricity 100warm", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["electricity 100"]>maxShedDemand["electricity"]].plot(ax=axsEle[1], column="electricity 100", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["electricity 100cold"]>maxShedDemand["electricity"]].plot(ax=axsEle[2], column="electricity 100cold", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["natural_gas_industry 100warm"]>maxShedDemand["natural_gas_industry"]].plot(ax=axsNGI[0], column="natural_gas_industry 100warm", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["natural_gas_industry 100"]>maxShedDemand["natural_gas_industry"]].plot(ax=axsNGI[1], column="natural_gas_industry 100", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["natural_gas_industry 100cold"]>maxShedDemand["natural_gas_industry"]].plot(ax=axsNGI[2], column="natural_gas_industry 100cold", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["heat 100warm"]>maxShedDemand["heat"]].plot(ax=axsHeat[0], column="heat 100warm", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["heat 100"]>maxShedDemand["heat"]].plot(ax=axsHeat[1], column="heat 100", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["heat 100cold"]>maxShedDemand["heat"]].plot(ax=axsHeat[2], column="heat 100cold", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        axsEle[0].set_title("High energy savings")        axsEle[1].set_title("Winter as usual")        axsEle[2].set_title("Cold winter")        # rows[0].suptitle("Electricity")        # rows[1].suptitle("Industrial gas")        # rows[2].suptitle("Heat")        for row in rows:            for ax in row.get_axes():                ax.axis("off")        plt.xticks([])        plt.yticks([])        # plt.subplots_adjust(wspace=0,hspace=0)        cbEle = fig.colorbar(axsEle[2].collections[0],ax=axsEle,label = "Reduced electricity demand [%]")        cbNGI = fig.colorbar(axsNGI[2].collections[0],ax=axsNGI,label = "Reduced industrial gas demand [%]")        cbHeat = fig.colorbar(axsHeat[2].collections[0], ax=axsHeat, label="Reduced heat demand [%]")        cbNGI.set_ticks(np.unique(np.clip(np.append(cbNGI.get_ticks(),vmaxNGI),vmin,vmaxNGI)))        plt.savefig(f"{self.plotPath}/EUMaps.pdf", format="pdf", bbox_inches="tight")        plt.savefig(f"{self.plotPath}/EUMaps.svg", format="svg", bbox_inches="tight")    def plotSheddingEUMapsSelf(self):        """ plots maps - selfish """        # get countries        gdfCountries = self.gdfCountries.copy()        # write load shedding data        gdfCountries["electricity 100self"] = self.countryDF["electricity 100self"][self.setNodes]        gdfCountries["electricity 100"] = self.countryDF["electricity 100"][self.setNodes]        gdfCountries["heat 100self"] = self.countryDF["heat 100self"][self.setNodes]        gdfCountries["heat 100"] = self.countryDF["heat 100"][self.setNodes]        gdfCountries["natural_gas_industry 100self"] = self.countryDF["natural_gas_industry 100self"][self.setNodes]        gdfCountries["natural_gas_industry 100"] = self.countryDF["natural_gas_industry 100"][self.setNodes]        # plot        # fig, axes = plt.subplots(nrows=3,ncols=3,sharex=True,sharey=True)        fig = plt.figure(figsize=(11, 9), dpi=100,constrained_layout =True)        rows = fig.subfigures(3,1)        axsEle = rows[0].subplots(1,2)        axsNGI = rows[1].subplots(1, 2)        axsHeat = rows[2].subplots(1,2)        # axsArrows = rows[3].subplots(1,3)        vmin = 0        vmaxEle = 10*np.round(gdfCountries.loc[:,gdfCountries.columns.str.contains("electricity")].max().max()/10)        vmaxHeat = 10*np.round(gdfCountries.loc[:,gdfCountries.columns.str.contains("heat")].max().max()/10)        vmaxNGI = 10*np.round(gdfCountries.loc[:,gdfCountries.columns.str.contains("natural_gas_industry")].max().max()/10)        normEle = plt.Normalize(vmin = vmin,vmax = vmaxEle)        normHeat = plt.Normalize(vmin = vmin,vmax = vmaxHeat)        normNGI = plt.Normalize(vmin = vmin,vmax = vmaxNGI)        # plot heat maps        gdfCountries.plot(ax=axsEle[0],column="electricity 100", edgecolor='grey',linewidth=0.5,cmap=self.cmapEle, norm=normEle)        gdfCountries.plot(ax=axsEle[1],column="electricity 100self", edgecolor='grey',linewidth=0.5,cmap=self.cmapEle, norm=normEle)        gdfCountries.plot(ax=axsNGI[0],column="natural_gas_industry 100", edgecolor='grey',linewidth=0.5,cmap=self.cmapNG, norm=normNGI)        gdfCountries.plot(ax=axsNGI[1],column="natural_gas_industry 100self", edgecolor='grey',linewidth=0.5,cmap=self.cmapNG, norm=normNGI)        gdfCountries.plot(ax=axsHeat[0], column="heat 100", edgecolor='grey',linewidth=0.5, cmap=self.cmapHeat, norm=normHeat)        gdfCountries.plot(ax=axsHeat[1], column="heat 100self", edgecolor='grey',linewidth=0.5, cmap=self.cmapHeat, norm=normHeat)        # plot hatches        maxShedDemand = self.scenarios["short0"].extractDataFromRaw("maxShedDemandLow", "par")[["electricity","natural_gas_industry","heat"]]*100 + self.epsMaxShedDemand        gdfCountries[gdfCountries["electricity 100"]>maxShedDemand["electricity"]].plot(ax=axsEle[0], column="electricity 100", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["electricity 100self"]>maxShedDemand["electricity"]].plot(ax=axsEle[1], column="electricity 100self", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["natural_gas_industry 100"]>maxShedDemand["natural_gas_industry"]].plot(ax=axsNGI[0], column="natural_gas_industry 100", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["natural_gas_industry 100self"]>maxShedDemand["natural_gas_industry"]].plot(ax=axsNGI[1], column="natural_gas_industry 100self", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["heat 100"]>maxShedDemand["heat"]].plot(ax=axsHeat[0], column="heat 100", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        gdfCountries[gdfCountries["heat 100self"]>maxShedDemand["heat"]].plot(ax=axsHeat[1], column="heat 100self", hatch="///",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth = 0)        # plot selfish countries        setSelfishNodes = self.scenarios["short100self"].system["setSelfishNodes"]        gdfCountries.loc[setSelfishNodes].plot(ax=axsEle[1],facecolor = "none",edgecolor=self.ethcolors.getColor("red"))        gdfCountries.loc[setSelfishNodes].plot(ax=axsNGI[1],facecolor = "none",edgecolor=self.ethcolors.getColor("red"))        gdfCountries.loc[setSelfishNodes].plot(ax=axsHeat[1],facecolor = "none",edgecolor=self.ethcolors.getColor("red"))        axsEle[0].set_title("Cooperative")        axsEle[1].set_title("Selfish")        # rows[0].suptitle("Electricity")        # rows[1].suptitle("Industrial gas")        # rows[2].suptitle("Heat")        for row in rows:            for ax in row.get_axes():                ax.axis("off")        plt.xticks([])        plt.yticks([])        # plt.subplots_adjust(wspace=0,hspace=0)        cbEle = fig.colorbar(axsEle[1].collections[0],ax=axsEle,label = "Reduced electricity demand [%]")        cbNGI = fig.colorbar(axsNGI[1].collections[0],ax=axsNGI,label = "Reduced industrial gas demand [%]")        cbHeat = fig.colorbar(axsHeat[1].collections[0], ax=axsHeat, label="Reduced heat demand [%]")        cbNGI.set_ticks(np.unique(np.clip(np.append(cbNGI.get_ticks(),vmaxNGI),vmin,vmaxNGI)))        plt.savefig(f"{self.plotPath}/EUMapsSelfish.pdf", format="pdf", bbox_inches="tight")        plt.savefig(f"{self.plotPath}/EUMapsSelfish.svg", format="svg", bbox_inches="tight")    def plotSheddingCHMaps(self):        """ plots maps """        selNodes = ["AT","CH","DE","FR","IT"]        gdfCountries = self.gdfCountries.loc[selNodes]        # write load shedding data        gdfCountries["electricity 100warm"] = self.countryDF["electricity 100warm"][selNodes]        gdfCountries["electricity 100"] = self.countryDF["electricity 100"][selNodes]        gdfCountries["electricity 100cold"] = self.countryDF["electricity 100cold"][selNodes]        gdfCountries["heat 100warm"] = self.countryDF["heat 100warm"][selNodes]        gdfCountries["heat 100"] = self.countryDF["heat 100"][selNodes]        gdfCountries["heat 100cold"] = self.countryDF["heat 100cold"][selNodes]        gdfCountries["natural_gas_industry 100warm"] = self.countryDF["natural_gas_industry 100warm"][selNodes]        gdfCountries["natural_gas_industry 100"] = self.countryDF["natural_gas_industry 100"][selNodes]        gdfCountries["natural_gas_industry 100cold"] = self.countryDF["natural_gas_industry 100cold"][selNodes]        # calculate flows        # plot        # fig, axes = plt.subplots(nrows=3,ncols=3,sharex=True,sharey=True)        fig = plt.figure(figsize=(9, 9), dpi=100,constrained_layout =True)        rows = fig.subfigures(3,1)        axsEle = rows[0].subplots(1,3)        axsNGI = rows[1].subplots(1, 3)        axsHeat = rows[2].subplots(1,3)        # axsArrows = rows[3].subplots(1,3)        vmin = 0        vmaxEle = 5*np.round(gdfCountries.loc[:,gdfCountries.columns.str.contains("electricity")].max().max()/5)        vmaxHeat = 5*np.round(gdfCountries.loc[:,gdfCountries.columns.str.contains("heat")].max().max()/5)        vmaxNGI = 5*np.round(gdfCountries.loc[:,gdfCountries.columns.str.contains("natural_gas_industry")].max().max()/5)        normEle = plt.Normalize(vmin = vmin,vmax = vmaxEle)        normHeat = plt.Normalize(vmin = vmin,vmax = vmaxHeat)        normNGI = plt.Normalize(vmin = vmin,vmax = vmaxNGI)        gdfCountries.plot(ax=axsEle[0],column="electricity 100warm", edgecolor='grey',linewidth=0.5,cmap=self.cmapEle, norm=normEle)        gdfCountries.plot(ax=axsEle[1],column="electricity 100", edgecolor='grey',linewidth=0.5,cmap=self.cmapEle, norm=normEle)        gdfCountries.plot(ax=axsEle[2],column="electricity 100cold", edgecolor='grey',linewidth=0.5,cmap=self.cmapEle, norm=normEle)        gdfCountries.plot(ax=axsNGI[0],column="natural_gas_industry 100warm", edgecolor='grey',linewidth=0.5,cmap=self.cmapNG, norm=normNGI)        gdfCountries.plot(ax=axsNGI[1],column="natural_gas_industry 100", edgecolor='grey',linewidth=0.5,cmap=self.cmapNG, norm=normNGI)        gdfCountries.plot(ax=axsNGI[2],column="natural_gas_industry 100cold", edgecolor='grey',linewidth=0.5,cmap=self.cmapNG, norm=normNGI)        gdfCountries.plot(ax=axsHeat[0], column="heat 100warm", edgecolor='grey',linewidth=0.5, cmap=self.cmapHeat, norm=normHeat)        gdfCountries.plot(ax=axsHeat[1], column="heat 100", edgecolor='grey',linewidth=0.5, cmap=self.cmapHeat, norm=normHeat)        gdfCountries.plot(ax=axsHeat[2], column="heat 100cold", edgecolor='grey',linewidth=0.5, cmap=self.cmapHeat, norm=normHeat)        # plot hatches        maxShedDemand = self.scenarios["short0"].extractDataFromRaw("maxShedDemandLow", "par")[["electricity", "natural_gas_industry", "heat"]] * 100  + self.epsMaxShedDemand        gdfCountries[gdfCountries["electricity 100warm"] > maxShedDemand["electricity"]].plot(ax=axsEle[0],column="electricity 100warm",hatch="//",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth=0)        gdfCountries[gdfCountries["electricity 100"] > maxShedDemand["electricity"]].plot(ax=axsEle[1],column="electricity 100",hatch="//", facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"), linewidth=0)        gdfCountries[gdfCountries["electricity 100cold"] > maxShedDemand["electricity"]].plot(ax=axsEle[2],column="electricity 100cold",hatch="//",facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"),linewidth=0)        gdfCountries[gdfCountries["natural_gas_industry 100warm"] > maxShedDemand["natural_gas_industry"]].plot(ax=axsNGI[0], column="natural_gas_industry 100warm", hatch="///", facecolor="none", edgecolor=self.ethcolors.getColor("grey","dark"),linewidth=0)        gdfCountries[gdfCountries["natural_gas_industry 100"] > maxShedDemand["natural_gas_industry"]].plot(ax=axsNGI[1], column="natural_gas_industry 100", hatch="///", facecolor="none", edgecolor=self.ethcolors.getColor("grey","dark"),linewidth=0)        gdfCountries[gdfCountries["natural_gas_industry 100cold"] > maxShedDemand["natural_gas_industry"]].plot(ax=axsNGI[2], column="natural_gas_industry 100cold", hatch="///", facecolor="none", edgecolor=self.ethcolors.getColor("grey","dark"),linewidth=0)        gdfCountries[gdfCountries["heat 100warm"] > maxShedDemand["heat"]].plot(ax=axsHeat[0], column="heat 100warm",hatch="//", facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"), linewidth=0)        gdfCountries[gdfCountries["heat 100"] > maxShedDemand["heat"]].plot(ax=axsHeat[1], column="heat 100",hatch="//", facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"), linewidth=0)        gdfCountries[gdfCountries["heat 100cold"] > maxShedDemand["heat"]].plot(ax=axsHeat[2], column="heat 100cold",hatch="//", facecolor="none",edgecolor=self.ethcolors.getColor("grey","dark"), linewidth=0)        axsEle[0].set_title("High energy savings")        axsEle[1].set_title("Winter as usual")        axsEle[2].set_title("Cold winter")        # rows[0].suptitle("Electricity")        # rows[1].suptitle("Industrial gas")        # rows[2].suptitle("Heat")        # rows[3].suptitle("Gas Flows")        for row in rows:            for ax in row.get_axes():                ax.axis("off")        plt.xticks([])        plt.yticks([])        # plt.subplots_adjust(wspace=0,hspace=0)        cbEle = fig.colorbar(axsEle[2].collections[0], ax=axsEle, label="Reduced electricity demand [%]")        cbNGI = fig.colorbar(axsNGI[2].collections[0], ax=axsNGI, label="Reduced industrial gas demand [%]")        cbHeat = fig.colorbar(axsHeat[2].collections[0], ax=axsHeat, label="Reduced heat demand [%]")        cbNGI.set_ticks(np.unique(np.clip(np.append(cbNGI.get_ticks(),vmaxNGI),vmin,vmaxNGI)))        plt.savefig(f"{self.plotPath}/CHMaps.pdf", format="pdf", bbox_inches="tight")        plt.savefig(f"{self.plotPath}/CHMaps.svg", format="svg", bbox_inches="tight")