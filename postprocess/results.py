"""===========================================================================================================================================================================Title:        ENERGY-CARBON OPTIMIZATION PLATFORMCreated:      October-2021Authors:      Alissa Ganter (aganter@ethz.ch)Organization: Laboratory of Risk and Reliability Engineering, ETH ZurichDescription:  Class is defining the postprocessing of the results.              The class takes as inputs the optimization problem (model) and the system configurations (system).              The class contains methods to read the results and save them in a result dictionary (resultDict).==========================================================================================================================================================================="""import loggingimport pyomo.environ as peimport csvimport osimport pickleimport pandas as pd#from postprocess.functions.create_dashboard_dictionary import DashboardDictionaryclass Postprocess:    system    = dict()    pyoDict   = dict()    varDict   = dict()    varDf     = dict()    modelName = str()    def __init__(self, model, pyoDict, **kwargs):        """postprocessing of the results of the optimization        :param model:     optimization model        :param pyoDict:   input data dictionary        :param modelName: model name used for the directory to save the results in"""        self.model     = model        self.system    = model.system        self.pyoDict   = pyoDict        self.modelName = kwargs.get('modelName', self.modelName)        self.nameDir   = f'./outputs/results{self.modelName}/'        self.makeDirs()        self.printModelInstance()        self.getVarValues()        self.createDataframes()        self.saveResults()    def printModelInstance(self):        """save model instance as a txt-file"""        with open(f'{self.nameDir}instance.txt', 'w') as file:            self.model.instance.pprint(file)        file.close()    def getVarValues(self):        """get the values assigned to each variable and add the results to the pyoDict"""        for var in self.model.instance.component_objects(pe.Var, active=True):            self.varDict[var.name] = dict()            for index in var:                self.varDict[var.name][index] = pe.value(var[index])        # add results to pyoDict        self.pyoDict['varValues'] = self.varDict        self.pyoDict['Results']   = self.model.results    def getProperties(self, docString):        """get properties (doc, dimensions, domain)        :return dimensions: dimensions of the parameter, variable, constraint"""        dimensions = docString.split('.')[1]        if 'Dimensions' in dimensions:            dimensions = dimensions.split('.')[-1].split(':')[-1]            if ',' in dimensions:                dimensions = dimensions.replace(' ','').split(',')            else:                dimensions = dimensions.strip()        return dimensions    def createDataframes(self):        """create a dataframe to save the results"""        for varName, varValues in self.varDict.items():            varResults  = varValues.values()            indexValues = varValues.keys()            indexNames  = self.getProperties(getattr(self.model.instance, varName).doc)            self.varDf[varName] = pd.DataFrame(varResults, index=pd.MultiIndex.from_tuples(indexValues, names=indexNames))    def makeDirs(self):        """create results directory"""        try:            os.makedirs(self.nameDir)        except OSError:            pass    def saveResults(self):        """save the input data (pyoDict) and the results (varDf)"""        with open(f'{self.nameDir}pyoDict.pickle', 'wb') as file:            pickle.dump(self.pyoDict, file, protocol=pickle.HIGHEST_PROTOCOL)        for varName, df in self.varDf.items():            df.to_csv(f'{self.nameDir}{varName}.csv')    # def getParamValues(self):    # print all parameters    # iterate over params: for param in self.model.instance.component_objects(pe.Param, active=True):    # get paramName: param.name    # iterate over paramIndices: for index in param: ...    # get paramValue: pe.value(param[index])